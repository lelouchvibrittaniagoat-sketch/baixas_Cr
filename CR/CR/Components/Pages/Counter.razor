@page "/counter"
@using MudBlazor
@using System.Text.Json
@using DTOS
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@using System.Diagnostics
@inject IJSRuntime JSRuntime
@inject FileDownloadService FileService

<MudContainer Class="mt-10">
    <MudGrid Class="mt-8">
        <MudItem xs="5" sm="6" md="3">
            <MudCard Elevation="25" Class="rounded-lg pb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Align="Align.Center">BAIXAS COM ERRO</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div class="d-flex justify-center">
                        <MudText Typo="Typo.h3">@baixasComErros</MudText>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="5" sm="6" md="3">
            <MudCard Elevation="25" Class="rounded-lg pb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Align="Align.Center">BAIXAS REALIZADAS</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div class="d-flex justify-center">
                        <MudText Typo="Typo.h3">@baixasSemErros</MudText>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="5" sm="6" md="3">
            <MudCard Elevation="25" Class="rounded-lg pb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Align="Align.Center">RECONCILIAÇÕES</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div class="d-flex justify-center">
                        <MudText Typo="Typo.h3">10</MudText>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="5" sm="6" md="3">
            <MudCard Elevation="25" Class="rounded-lg pb-4">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5" Align="Align.Center">BAIXAS TOTAL</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div class="d-flex justify-center">
                        <MudText Typo="Typo.h3">@baixasCrs.Count</MudText>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

<MudContainer Class="mt-10">
    <MudText Typo="Typo.h3" Align="Align.Left" GutterBottom="true">Histórico</MudText>
    <MudStack Class="align-center mud-width-full" Row>

        <MudButton @onclick="OpenDialogAsync" Variant="Variant.Filled" Color="Color.Primary">
            Baixar composição
        </MudButton>

        <MudSelect @bind-Value="_redeSelecionada" Label="Selecione rede" FitContent="_fitContent" Variant="Variant.Outlined" ShrinkLabel>
            <MudSelectItem Value="@("")">Todas</MudSelectItem>
            @foreach (var rede in redes)
            {
                <MudSelectItem Value="@rede">@rede</MudSelectItem>
            }

        </MudSelect>

        <MudSelect @bind-Value="_contaSelecionada" Label="Selecione a conta bancária" FitContent="_fitContent" Variant="Variant.Outlined" ShrinkLabel>
            <MudSelectItem Value="@("")">Todas</MudSelectItem>
            @foreach (var conta in contasContabeis)
            {
                <MudSelectItem Value="@conta">@conta</MudSelectItem>
            }

        </MudSelect>

        <MudDatePicker Label="Data de pagamento" Editable="true" @bind-Date="_dataLancamento" Mask="@(new DateMask("00/00/0000"))" DateFormat="dd-MM-yyyy" Placeholder="Data de pagamento" Variant="Variant.Outlined" />

        <MudIconButton Icon="@Icons.Material.Filled.Search" OnClick="@PesquisarLancamentos" Class="border" aria-label="Pesquisar" />

    </MudStack>
</MudContainer>

<MudContainer Class="mt-10">
    <MudPaper Style="height:400px; overflow-y:auto; padding:16px;" Class="border-1">

        @foreach (BaixasCr baixasCr in baixasCrs)
        {
            <MudItem xs="12" Style="background-color:lightgray;">
                <MudCard Elevation="25" Class="rounded-lg pb-4 border-1" Style="width:100%;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h5" Align="Align.Left">@baixasCr.nome_arquivo</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <div class="d-flex justify-space-between w-100">
                            <MudText Typo="Typo.h6">Data de pagamento: @baixasCr.data_baixa</MudText>
                            <MudText Typo="Typo.h6">Situação: @((baixasCr.status != "SEM ERROS") ? "ERRO (NÃO BAIXADO NO SAP)" : "SEM ERROS (BAIXADO)")</MudText>
                        </div>
                        <div class="d-flex justify-left">
                            <MudText Typo="Typo.h6">Rede: @baixasCr.rede</MudText>
                        </div>
                        <div class="d-flex justify-left">
                            <MudText Typo="Typo.h6">Conta bancária: @baixasCr.conta_contabil - @baixasCr.filial</MudText>
                        </div>
                        <div class="d-flex justify-left">
                            <MudText Typo="Typo.h6">Filial: @baixasCr.filial - @baixasCr.id</MudText>
                        </div>

                    </MudCardContent>
                    <MudCardActions Class="d-flex">
                        <div class="d-flex justify-space-between w-75">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium">Baixar composição</MudButton>
                            <MudButton Variant="Variant.Filled" OnClick="() => CancelarComposicao(baixasCr.id)" Color="Color.Error" Size="Size.Medium">Cancelar composição no sistema</MudButton>
                            <MudButton @onclick="() => BaixarArquivoAsync(baixasCr.id)"
                            Variant="Variant.Filled"
                            Color="Color.Error"
                            Size="Size.Medium">
                                Baixar erros
                            </MudButton>



                        </div>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudPaper>
</MudContainer>

@code {
    private bool _fullWidth;
    private bool _fitContent;

    private string _redeSelecionada;
    private string _contaSelecionada;
    private DateTime? _dataLancamento = null;

    private List<BaixasCr> baixasCrs = new();
    private string[] redes = [];
    private string[] contasContabeis = [];

    private int? baixasSemErros;
    private int? baixasComErros;



    protected override async Task OnInitializedAsync()
    {
        redes = GetRedes().ToArray();
        contasContabeis = GetContaContabil().ToArray();

        baixasCrs = GetLancamentosRealizados();
        AtualizarContadores();
    }

    private async Task PesquisarLancamentos()
    {
        baixasCrs = await GetLancamentosRealizadosComFiltros();
        AtualizarContadores();
    }
    private bool CancelarComposicao(int baixasACancelar)
    {
        using var httpClient = new HttpClient { BaseAddress = new Uri("http://localhost:5129/") };
        var response = httpClient.DeleteAsync("Composicao/CancelarComposicao").Result;
        if (!response.IsSuccessStatusCode) return false;

        return true;
    }
    private void AtualizarContadores()
    {
        baixasSemErros = baixasCrs.Count(x => x.status == "SEM ERROS");
        baixasComErros = baixasCrs.Count(x => x.status != "SEM ERROS");
    }

    private async Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<FormComposicao>("Simple Dialog", options);
        var result = await dialog.Result;
    }
    private async Task OpenDialogErrorAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<Error>("Simple Dialog", options);
        var result = await dialog.Result;
    }

    private async Task<byte[]> GetArquivoComErrosAsync(int idBaixa)
    {
        using var httpClient = new HttpClient { BaseAddress = new Uri("http://localhost:5129/") };
        var url = $"Composicao/GetComposicaoComErros?idBaixasCr={idBaixa}";
        var response = await httpClient.GetAsync(url);

        if (!response.IsSuccessStatusCode)
            return Array.Empty<byte>();

        return await response.Content.ReadAsByteArrayAsync();
    }

    private async Task BaixarArquivoAsync(int idBaixa)
    {

        var arquivo = await GetArquivoComErrosAsync(idBaixa);
        if (arquivo.Length == 0)
        {
            // opcional: mostrar erro ao usuário
            return;
        }

        var nomeArquivo = $"ComposicaoComErros_{idBaixa}.xlsx";
        var caminho = await FileService.SalvarArquivoAsync(arquivo, nomeArquivo);

        // Opcional: mostrar mensagem de sucesso
        Console.WriteLine($"Arquivo salvo em: {caminho}");
    }



    private List<BaixasCr> GetLancamentosRealizados()
    {
        using var httpClient = new HttpClient { BaseAddress = new Uri("http://localhost:5129/") };
        var response = httpClient.GetAsync("Composicao/BaixasRegistradasPelaAutomacao").Result;
        if (!response.IsSuccessStatusCode) return [];

        var json = response.Content.ReadAsStringAsync().Result;
        return JsonSerializer.Deserialize<List<BaixasCr>>(json) ?? [];
    }

    private async Task<List<BaixasCr>> GetLancamentosRealizadosComFiltros()
    {
        using var httpClient = new HttpClient { BaseAddress = new Uri("http://localhost:5129/") };

        var queryParams = new Dictionary<string, string>();

        if (_redeSelecionada != "")
            queryParams["redeCr"] = _redeSelecionada;

        if (_contaSelecionada !="")
            queryParams["contaContabil"] = _contaSelecionada;  


        if (_dataLancamento.HasValue)
            queryParams["dataDaBaixa"] = _dataLancamento.Value.ToString("dd/MM/yyyy");

        var queryString = string.Join("&", queryParams
            .Where(kvp => !string.IsNullOrWhiteSpace(kvp.Value))
            .Select(kvp => $"{kvp.Key}={Uri.EscapeDataString(kvp.Value)}"));

        var response = await httpClient.GetAsync($"Composicao/BaixasRegistradasPelaAutomacaoComFiltros?{queryString}");
        if (!response.IsSuccessStatusCode) return [];

        var json = await response.Content.ReadAsStringAsync();
        return JsonSerializer.Deserialize<List<BaixasCr>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? [];
    }

    private List<string> GetRedes()
    {
        using var httpClient = new HttpClient { BaseAddress = new Uri("http://localhost:5129/") };
        var response = httpClient.GetAsync("Composicao/GetRedeCr").Result;
        if (!response.IsSuccessStatusCode) return [];
        var json = response.Content.ReadAsStringAsync().Result;
        return JsonSerializer.Deserialize<List<string>>(json) ?? [];
    }

    private List<string> GetContaContabil()
    {
        using var httpClient = new HttpClient { BaseAddress = new Uri("http://localhost:5129/") };
        var response = httpClient.GetAsync("Composicao/GetContaBancaria").Result;
        if (!response.IsSuccessStatusCode) return [];
        var json = response.Content.ReadAsStringAsync().Result;
        return JsonSerializer.Deserialize<List<string>>(json) ?? [];
    }
}
