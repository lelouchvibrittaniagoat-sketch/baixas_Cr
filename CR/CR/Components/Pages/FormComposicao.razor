@using MudBlazor
@inject ISnackbar Snackbar
<MudDialog>
    <TitleContent>
        Formulário de baixas de composição.
    </TitleContent>

    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudButton OnClick="@PickFile" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                Escolher composição
            </MudButton>
            @if(selectedFileName != null) {
                <MudContainer Class="mt-10">
                    <MudPaper Style="overflow-x:auto; overflow-y:auto; padding:16px;">

                        <MudItem xs="20" Style="background-color:lightgray;">
                            <MudCard Elevation="25" Class="rounded-lg pb-10 border-1" Style="width:100%;">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h5" Align="Align.Left">Nome do arquivo:@selectedFileName</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <div class="d-flex justify-space-between w-100">
                                        <MudText Typo="Typo.h6">Data de pagamento:</MudText>
                                    </div>

                                    <div class="d-flex justify-left">
                                        <MudText Typo="Typo.h6">Rede:</MudText>
                                    </div>
                                    <div class="d-flex justify-left">
                                        <MudText Typo="Typo.h6">Conta bancária:</MudText>
                                    </div>

                                    <div class="d-flex justify-left">
                                        <MudRadioGroup T="string" @bind-Value="Adiantamento" Required="true" RequiredError="Account type is required!">
                                                <MudRadio Value="@("null")">Conta bancária</MudRadio>
                                                <MudRadio Value="@("2.01.01.02.01")">Adiantamento de cliente</MudRadio>
                                                <MudRadio Value="@("4.02.01.01.21")">Antecipação</MudRadio>
                                        </MudRadioGroup>
                                    </div>

                                </MudCardContent>

                            </MudCard>

                        </MudItem>

                        @if(errosIdentificados!= null)
                        {
                            <MudItem xs="12" Style="background-color:lightgray;">
                                <MudCard Elevation="25" Class="rounded-lg pb-4 border-1" Style="width:100%;">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h5" Align="Align.Left">Erros identificados</MudText>
                                        </CardHeaderContent>
                                    </MudCardHeader>
                                    <MudCardContent>

                                        <MudTable Items="@errosIdentificadosArray" Hover="true" Breakpoint="Breakpoint.Sm"  LoadingProgressColor="Color.Info">
                                            <HeaderContent>
                                                <MudTh>Situação</MudTh>

                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd DataLabel="Nr">@context</MudTd>

                                            </RowTemplate>
                                        </MudTable>



                                    </MudCardContent>

                                </MudCard>

                            </MudItem>
                        }



                    </MudPaper>

                </MudContainer>                
            }
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Fechar</MudButton>
        <MudButton  Disabled="@(!success)" Color="Color.Primary" OnClick="Submit">Realizar baixa no SAP</MudButton>
    </DialogActions>
</MudDialog>




@code {

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    MudForm form;
    bool success = false;
    string[] errors = { };
    private string selectedFileName;
    private void Cancel() => MudDialog.Cancel();
    private string errosIdentificados;
    private string[] errosIdentificadosArray;
    private FileResult arquivoSelecionado;
    private string? Adiantamento = null;


    private async void Submit()
    {
        await UploadDeComposicao();
        //MudDialog.Close(DialogResult.Ok(true));
    }
    private async Task UploadDeComposicao()
    {
        if (arquivoSelecionado != null)
        {
            using var content = new MultipartFormDataContent();
            var streamContent = new StreamContent(await arquivoSelecionado.OpenReadAsync());
            streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(arquivoSelecionado.ContentType);
            content.Add(streamContent, "file", arquivoSelecionado.FileName);
            string valorAdiantamento = Adiantamento; // padrão

            content.Add(new StringContent(valorAdiantamento), "adiantamentoCliente");
            using var httpClient = new HttpClient(){
                Timeout= TimeSpan.FromMinutes(5)
            };
            var response = await httpClient.PostAsync("http://localhost:5129/Composicao/UploadDeArquivoBaixasCR", content);

            if (response.IsSuccessStatusCode)
            {

                Snackbar.Add("✅ Processado com sucesso!", Severity.Success);
                MudDialog.Cancel();
            }
            else
            {
                errosIdentificados = await response.Content.ReadAsStringAsync();
                errosIdentificadosArray = errosIdentificados.Split(",");
                StateHasChanged();
                Snackbar.Add($"❌Composição possui erros! Por gentileza, verique", Severity.Error);
            }
        }   


    }

    private async Task PickFile()
    {
        try
        {
            var options = new PickOptions
                {
                    PickerTitle = "Selecione um arquivo Excel"
                };

            // Definindo os filtros para apenas xlsx e xlsm:
            options.FileTypes = new FilePickerFileType(new Dictionary<DevicePlatform, IEnumerable<string>>
            {
                { DevicePlatform.iOS, new[] { "org.openxmlformats.spreadsheetml.sheet", "org.ms-excel.sheet.macroenabled.12" } }, // UTI para iOS
                { DevicePlatform.Android, new[] { "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "application/vnd.ms-excel.sheet.macroenabled.12" } },
                { DevicePlatform.WinUI, new[] { ".xlsx", ".xlsm" } }, // Windows aceita extensão diretamente
                { DevicePlatform.macOS, new[] { "xlsx", "xlsm" } }
            });

            var result = await FilePicker.PickAsync(options);

            if (result != null)
            {
                arquivoSelecionado = result;
                selectedFileName = result.FileName;

            }
        }
        catch (Exception ex)
        {
            selectedFileName = $"Erro: {ex.Message}";
        }
    }
}